const { dynamicCommand } = require("../utils/dynamicCommand");
const { loadCommonFunctions } = require("../utils/loadCommonFunctions");

exports.onMessagesUpsert = async ({ socket, messages }) => {
  if (!messages.length) {
    return;
  }

  for (const webMessage of messages) {
    const commonFunctions = loadCommonFunctions({ socket, webMessage });

    if (!commonFunctions) {
      continue;
    }

    await dynamicCommand(commonFunctions);
  }
};

const wordEmojiMap = {
  soky: "üè≥Ô∏è‚Äçüåà",
  maicol: "üõµ",
  olo: "üé∏",
  stacy: "üïäÔ∏è",
  gigi: "üßö‚Äç‚ôÄÔ∏è",
  diamantico: "ü•ä",
  hustle: "ü§•",
  edwin: "ü¶Ñ",
  alexander: "ü´é",
  cameron: "ü¶ê",
  krampus: "ü¶á",
  joan: "üë®üèæ‚Äçü¶Ω",
  amor: "ü´¶",
  bb: "üíã",
  bebe: "üíã",
  mia: "üëÄ",
  cuero: "üßö‚Äç‚ôÄÔ∏è",
  klk: "üá©üá¥",
  barry: "üçÑ",
};

module.exports = async ({ message, socket, remoteJid }) => {
  const text = message.text?.toLowerCase(); // Convertir mensaje a min√∫sculas.
  if (!text) return;

  for (const [word, emoji] of Object.entries(wordEmojiMap)) {
    if (text.includes(word)) {
      try {
        // Reaccionar al mensaje con el emoji.
        await socket.sendMessage(remoteJid, {
          react: {
            text: emoji,
            key: message.key,
          },
        });
      } catch (error) {
        console.error(`Error al reaccionar con "${emoji}" a "${word}":`, error);
      }
      break; // Detenerse despu√©s de reaccionar a la primera palabra encontrada.
    }
  }
};